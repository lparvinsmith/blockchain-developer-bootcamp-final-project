{"version":3,"sources":["context/EthereumContext.jsx","context/AccountContext.jsx","utils/truncateAddress.js","components/Button.jsx","components/WalletStatus.jsx","context/ContractContext.jsx","components/TextInput.jsx","hooks/useBuyin.js","context/MessageContext.jsx","hooks/useVotingOpen.js","hooks/useVoterRegistrationOpen.js","components/AdminActions.jsx","components/CandidateActions.jsx","hooks/useRegisterCandidate.js","components/VoterActions.jsx","hooks/useVoterActions.js","components/ContractActions.jsx","components/Message.jsx","App.js","reportWebVitals.js","index.js"],"names":["EthereumContext","createContext","undefined","EthereumProvider","provider","children","ethers","providers","Web3Provider","window","ethereum","error","signer","getSigner","Provider","value","AccountContext","AccountProvider","useState","account","setAccount","truncateAddress","address","num","substring","length","Button","onClick","disabled","className","WalletStatus","useContext","loading","setLoading","handleConnect","a","request","method","accounts","console","log","ContractContext","ContractProvider","contract","Contract","ContractData","TextInput","placeholder","onChange","useBuyin","buyin","setBuyin","then","result","toString","MessageContext","MessageProvider","message","setMessage","addMessage","text","type","setTimeout","useVotingOpen","votingOpen","setVotingOpen","useVoterRegistrationOpen","voterRegistrationOpen","setVoterRegistrationOpen","AdminActions","show","setShow","updateVotingOpen","catch","err","useUpdateVotingOpen","updateVoterRegistration","setVoterRegistrationClosed","useUpdateVoterRegistrationClosed","handleTODOMessage","CandidateActions","registrationOpen","open","setOpen","projectSubmissionOpen","useCandidateRegistrationOpen","registerCandidate","useRegisterCandidate","VoterActions","candidate","setCandidate","registerVoter","hash","useRegisterVoter","voteForAddress","vote","useVote","e","target","trim","utils","isAddress","ContractActions","Message","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.394f493e.chunk.js","sourcesContent":["import { ethers } from \"ethers\";\nimport { createContext } from \"react\";\n\n/* \n  This context uses the injected provider from Metamask and\n  stores the provider to read from the blockchain\n  and the signer to write to the blockchain\n*/\n\nexport const EthereumContext = createContext(undefined);\n\nexport const EthereumProvider = ({children}) => {  \n  // A Provider (in ethers) is a class which provides an \n  // abstraction for a connection to the Ethereum Network.\n  // It provides read-only access to the Blockchain and its status.\n  let provider;\n  try {\n    provider = new ethers.providers.Web3Provider(window.ethereum);\n  } catch (error) {\n    provider = undefined;\n  }\n\n  // A Signer is a class which has access to a private key, \n  // which can sign messages and transactions to authorize\n  // the network to charge your account ether to perform operations.\n  const signer = provider?.getSigner();\n\n  return (\n    <EthereumContext.Provider value={{provider, signer}}>\n      {children}\n    </EthereumContext.Provider>\n  );\n}\n\n","import { createContext, useState } from \"react\";\n\n/* \n  This context stores the user's account data and\n  the setter setAccount\n*/\n\nexport const AccountContext = createContext(undefined);\n\nexport const AccountProvider = ({ children }) => {\n  const [account, setAccount] = useState(undefined);\n\n  return (\n    <AccountContext.Provider value={{ account, setAccount }}>\n      {children}\n    </AccountContext.Provider>\n  );\n};\n","export const truncateAddress = (address, num = 3) => {\n  if (!address) return \"\";\n  return (\n    !!address &&\n    `${address.substring(0, num + 2)}...${address.substring(\n      address.length - num - 1\n    )}`\n  );\n};\n","import \"../styles/Button.css\";\n\nexport const Button = ({ onClick, disabled, children }) => {\n  return (\n    <button className=\"button\" onClick={onClick} disabled={disabled}>\n      {children}\n    </button>\n  );\n};\n","import { useContext, useState } from \"react\";\nimport { AccountContext } from \"../context/AccountContext\";\nimport { truncateAddress } from \"../utils/truncateAddress\";\nimport { Button } from \"./Button\";\nimport \"../styles/WalletStatus.css\";\n\nexport const WalletStatus = () => {\n  const { account, setAccount } = useContext(AccountContext);\n  const [loading, setLoading] = useState(false);\n\n  const handleConnect = async () => {\n    setLoading(true);\n    try {\n      // sends metamask wallet request to connect\n      const accounts = await window.ethereum?.request({\n        method: \"eth_requestAccounts\",\n      });\n      setAccount(accounts[0]);\n      setLoading(false);\n    } catch {\n      console.log(\"error connecting wallet\");\n      setLoading(false);\n    }\n  };\n\n  if (account) {\n    return (\n      <div className=\"WalletStatus\">\n        <div className=\"WalletStatus-message\">\n          {`Wallet ${truncateAddress(account)} connected`}\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"WalletStatus\">\n        <Button onClick={handleConnect} disabled={loading}>\n          Connect your wallet\n        </Button>\n      </div>\n    );\n  }\n};\n","import { ethers } from \"ethers\";\nimport { createContext, useContext } from \"react\";\nimport { EthereumContext } from \"./EthereumContext\";\nimport ContractData from \"../contracts/RetroactiveFunding.json\";\n\n// deployed on Rinkeby\nconst CONTRACT_ADDRESS = \"0xaceb4dab6f366e57c3368584372ea6fa2781522f\";\n\n/* \n  This context uses ethers to find the contract on the blockchain and\n  stores the contract and its methods for user interaction\n*/\n\nexport const ContractContext = createContext(undefined);\n\nexport const ContractProvider = ({ children }) => {\n  const { signer } = useContext(EthereumContext);\n  const contract = new ethers.Contract(CONTRACT_ADDRESS, ContractData, signer);\n\n  return (\n    <ContractContext.Provider value={{ contract }}>\n      {children}\n    </ContractContext.Provider>\n  );\n};\n","import \"../styles/TextInput.css\";\n\nexport const TextInput = ({ placeholder, value, onChange }) => {\n  return (\n    <input\n      className=\"TextInput\"\n      placeholder={placeholder}\n      value={value}\n      onChange={onChange}\n    />\n  );\n};\n","import { useContext, useState } from \"react\";\nimport { ContractContext } from \"../context/ContractContext\";\n\nexport const useBuyin = () => {\n  const { contract } = useContext(ContractContext);\n  const [buyin, setBuyin] = useState(\"\");\n  contract.buyin().then((result) => setBuyin(result.toString()));\n\n  return buyin;\n};\n\nexport const useUpdateBuyin = () => {\n  const { contract } = useContext(ContractContext);\n\n  const updateBuyin = (amount) => {\n    contract\n      .setBuyin(amount)\n      .then((result) => console.log(\"result\", result))\n      .catch((err) => console.log(\"error\", err));\n  };\n\n  return updateBuyin;\n};\n","import { createContext, useState } from \"react\";\n\n/* \n  This context temporarily stores a message to the user\n  which can be set via addMessage\n*/\n\nexport const MessageContext = createContext(undefined);\n\nexport const MessageProvider = ({ children }) => {\n  const [message, setMessage] = useState(undefined);\n\n  const addMessage = (text, type) => {\n    setMessage({ text, type });\n    setTimeout(() => {\n      setMessage(undefined);\n    }, 5000);\n  };\n\n  return (\n    <MessageContext.Provider value={{ message, addMessage }}>\n      {children}\n    </MessageContext.Provider>\n  );\n};\n","import { useContext, useState } from \"react\";\nimport { ContractContext } from \"../context/ContractContext\";\nimport { MessageContext } from \"../context/MessageContext\";\n\nexport const useVotingOpen = () => {\n  const { contract } = useContext(ContractContext);\n  const [votingOpen, setVotingOpen] = useState(false);\n  contract.votingOpen().then((result) => setVotingOpen(result));\n\n  return votingOpen;\n};\n\nexport const useUpdateVotingOpen = () => {\n  const { contract } = useContext(ContractContext);\n  const { addMessage } = useContext(MessageContext);\n\n  const updateVotingOpen = () => {\n    contract\n      .setVotingOpen()\n      .then((result) => {\n        console.log(\"result\", result);\n        addMessage(\"Voting is open\", \"success\");\n      })\n      .catch((err) => {\n        addMessage(err.message, \"error\");\n      });\n  };\n\n  return updateVotingOpen;\n};\n","import { useContext, useState } from \"react\";\nimport { ContractContext } from \"../context/ContractContext\";\nimport { MessageContext } from \"../context/MessageContext\";\n\nexport const useVoterRegistrationOpen = () => {\n  const { contract } = useContext(ContractContext);\n  const [voterRegistrationOpen, setVoterRegistrationOpen] = useState(false);\n  contract\n    .voterRegistrationOpen()\n    .then((result) => setVoterRegistrationOpen(result));\n\n  return voterRegistrationOpen;\n};\n\nexport const useUpdateVoterRegistrationClosed = () => {\n  const { contract } = useContext(ContractContext);\n  const { addMessage } = useContext(MessageContext);\n\n  const updateVoterRegistrationClosed = () => {\n    contract\n      .setVoterRegistrationClosed()\n      .then((result) => {\n        console.log(\"result\", result);\n        addMessage(\"Voter registration is closed\", \"success\");\n      })\n      .catch((err) => {\n        addMessage(err.message, \"error\");\n      });\n  };\n\n  return updateVoterRegistrationClosed;\n};\n","import { useContext, useState } from \"react\";\nimport { Button } from \"./Button\";\nimport { TextInput } from \"./TextInput\";\nimport { useBuyin } from \"../hooks/useBuyin\";\nimport { useVotingOpen, useUpdateVotingOpen } from \"../hooks/useVotingOpen\";\nimport { MessageContext } from \"../context/MessageContext\";\nimport {\n  useUpdateVoterRegistrationClosed,\n  useVoterRegistrationOpen,\n} from \"../hooks/useVoterRegistrationOpen\";\n\n// TODO not all admin actions are hooked up.\n// Still considering the best way to manage the DAO's statuses,\n// eg. registrations open, voting open.\n\nexport const AdminActions = () => {\n  const [show, setShow] = useState(false);\n  const buyin = useBuyin();\n  const votingOpen = useVotingOpen();\n  const updateVotingOpen = useUpdateVotingOpen();\n  const voterRegistrationOpen = useVoterRegistrationOpen();\n  const updateVoterRegistration = useUpdateVoterRegistrationClosed();\n  const { addMessage } = useContext(MessageContext);\n\n  const handleTODOMessage = () => {\n    addMessage(\"Coming soon! This is a work in progress\");\n  };\n\n  const handleUpdateVoterRegistration = () => {\n    updateVoterRegistration();\n  };\n\n  const handleUpdateVoting = () => {\n    updateVotingOpen();\n  };\n\n  return (\n    <div className=\"AdminActions\">\n      <div className=\"ContractActions-title\" onClick={() => setShow(!show)}>\n        Admin\n      </div>\n      {show && (\n        <div className=\"ContractActions-body\">\n          <div className=\"ContractActions-action\">\n            <div className=\"ContractActions-label\">{`Current buyin: ${buyin} wei`}</div>\n            <TextInput placeholder=\"update amount in wei\" />\n            <Button onClick={handleTODOMessage}>Update</Button>\n          </div>\n          <div className=\"ContractActions-action\">\n            <div className=\"ContractActions-label\">\n              {`Voter registration is ${\n                voterRegistrationOpen ? \"\" : \"not \"\n              }open`}\n            </div>\n            <Button onClick={handleUpdateVoterRegistration}>\n              Close voter registration\n            </Button>\n          </div>\n          <div className=\"ContractActions-action\">\n            <Button onClick={handleTODOMessage}>\n              Close candidate registration\n            </Button>\n          </div>\n          <div className=\"ContractActions-action\">\n            <div className=\"ContractActions-label\">\n              {`Voting is ${votingOpen ? \"\" : \"not \"}open`}\n            </div>\n            <Button onClick={handleUpdateVoting}>Open voting</Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { useState } from \"react\";\nimport { Button } from \"./Button\";\nimport {\n  useCandidateRegistrationOpen,\n  useRegisterCandidate,\n} from \"../hooks/useRegisterCandidate\";\n\n// TODO an improvement would be to list registered candidates.\n// however, as they're currently stored in a mapping in the contract\n// they are not inumerable. solutions could be additionally storing them\n// in a public array or in an offchain DB\n\nexport const CandidateActions = () => {\n  const [show, setShow] = useState(false);\n  const registrationOpen = useCandidateRegistrationOpen();\n  const registerCandidate = useRegisterCandidate();\n\n  const handleRegister = () => {\n    registerCandidate();\n  };\n\n  return (\n    <div>\n      <div className=\"ContractActions-title\" onClick={() => setShow(!show)}>\n        Candidates\n      </div>\n      {show && (\n        <div className=\"ContractActions-body\">\n          {registrationOpen ? (\n            <div className=\"ContractActions-action\">\n              <div className=\"ContractActions-label\">Register your project</div>\n              <Button onClick={handleRegister}>Become a candidate</Button>\n            </div>\n          ) : (\n            <div className=\"ContractActions-action\">\n              <div className=\"ContractActions-label\">Registration closed</div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import { useContext, useState } from \"react\";\nimport { ContractContext } from \"../context/ContractContext\";\nimport { MessageContext } from \"../context/MessageContext\";\n\nexport const useCandidateRegistrationOpen = () => {\n  const { contract } = useContext(ContractContext);\n  const [open, setOpen] = useState(false);\n  contract.projectSubmissionOpen().then((result) => setOpen(result));\n\n  return open;\n};\n\nexport const useRegisterCandidate = () => {\n  const { contract } = useContext(ContractContext);\n  const { addMessage } = useContext(MessageContext);\n\n  const registerCandidate = () => {\n    contract\n      .registerCandidate()\n      .then((result) => {\n        console.log(\"result\", result);\n        addMessage(\"Candidate has been registered\", \"success\");\n      })\n      .catch((err) => {\n        addMessage(err.message, \"error\");\n      });\n  };\n\n  return registerCandidate;\n};\n","import { useContext, useState } from \"react\";\nimport { Button } from \"./Button\";\nimport { TextInput } from \"./TextInput\";\nimport { useBuyin } from \"../hooks/useBuyin\";\nimport { useVotingOpen } from \"../hooks/useVotingOpen\";\nimport { useVoterRegistrationOpen } from \"../hooks/useVoterRegistrationOpen\";\nimport { useRegisterVoter, useVote } from \"../hooks/useVoterActions\";\nimport { MessageContext } from \"../context/MessageContext\";\nimport { ethers } from \"ethers\";\n\nexport const VoterActions = () => {\n  const [show, setShow] = useState(false);\n  const [candidate, setCandidate] = useState(\"\");\n  const buyin = useBuyin();\n  const voterRegistrationOpen = useVoterRegistrationOpen();\n  const votingOpen = useVotingOpen();\n  const registerVoter = useRegisterVoter();\n  const voteForAddress = useVote();\n  const { addMessage } = useContext(MessageContext);\n\n  const handleInputChange = (e) => {\n    const text = e.target.value;\n    setCandidate(text);\n  };\n\n  const handleMint = () => {\n    registerVoter();\n  };\n\n  const handleVote = () => {\n    const address = candidate.trim();\n    if (ethers.utils.isAddress(address)) {\n      voteForAddress(address);\n    } else {\n      addMessage(\"Must use valid ETH address\");\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"ContractActions-title\" onClick={() => setShow(!show)}>\n        Voters\n      </div>\n      {show && (\n        <div className=\"ContractActions-body\">\n          {voterRegistrationOpen && (\n            <div className=\"ContractActions-action\">\n              <div className=\"ContractActions-label\">\n                {`Voter NFT costs ${buyin} wei`}\n              </div>\n              <Button onClick={handleMint}>Mint voter NFT</Button>\n            </div>\n          )}\n          {votingOpen && (\n            <div className=\"ContractActions-action\">\n              <div className=\"ContractActions-label\">Vote for a project</div>\n              <TextInput\n                placeholder=\"project address\"\n                value={candidate}\n                onChange={handleInputChange}\n              />\n              <Button onClick={handleVote}>Vote</Button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import { useContext } from \"react\";\nimport { ContractContext } from \"../context/ContractContext\";\nimport { MessageContext } from \"../context/MessageContext\";\nimport { useBuyin } from \"./useBuyin\";\n\nexport const useRegisterVoter = () => {\n  const { contract } = useContext(ContractContext);\n  const { addMessage } = useContext(MessageContext);\n  const buyin = useBuyin();\n\n  const registerVoter = () => {\n    contract\n      .registerVoter({ value: buyin })\n      .then((result) => {\n        console.log(\"result\", result);\n        const message = `Voter successfully registered, see https://rinkeby.etherscan.io/tx/${result.hash}`;\n        addMessage(message, \"success\");\n      })\n      .catch((err) => {\n        addMessage(err.message, \"error\");\n      });\n  };\n\n  return registerVoter;\n};\n\nexport const useVote = () => {\n  const { contract } = useContext(ContractContext);\n  const { addMessage } = useContext(MessageContext);\n\n  const voteForAddress = (address) => {\n    contract\n      .vote(address)\n      .then((result) => {\n        console.log(\"result\", result);\n        addMessage(\"Voter successfully registered\", \"success\");\n      })\n      .catch((err) => {\n        addMessage(err.message, \"error\");\n      });\n  };\n\n  return voteForAddress;\n};\n","import { AdminActions } from \"./AdminActions\";\nimport { CandidateActions } from \"./CandidateActions\";\nimport { VoterActions } from \"./VoterActions\";\nimport \"../styles/ContractActions.css\";\n\nexport const ContractActions = () => {\n  // TODO add getIsAdmin to contract\n  const isAdmin = true;\n\n  return (\n    <div className=\"ContractActions\">\n      {isAdmin && <AdminActions />}\n      <VoterActions />\n      <CandidateActions />\n    </div>\n  );\n};\n","import { useContext } from \"react\";\nimport { MessageContext } from \"../context/MessageContext\";\nimport \"../styles/Message.css\";\n\nexport const Message = () => {\n  const { message } = useContext(MessageContext);\n\n  return (\n    <div className=\"Message\">\n      {message && (\n        <div className={`Message-text ${message.type}`}>{message.text}</div>\n      )}\n    </div>\n  );\n};\n","import \"./styles/App.css\";\nimport { EthereumProvider } from \"./context/EthereumContext\";\nimport { WalletStatus } from \"./components/WalletStatus\";\nimport { ContractProvider } from \"./context/ContractContext\";\nimport { AccountProvider } from \"./context/AccountContext\";\nimport { ContractActions } from \"./components/ContractActions\";\nimport { MessageProvider } from \"./context/MessageContext\";\nimport { Message } from \"./components/Message\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MessageProvider>\n        <EthereumProvider>\n          <AccountProvider>\n            <div className=\"App-header\">\n              <div className=\"App-title\">Retroactive Funding DAO 🕺</div>\n              <Message />\n              <WalletStatus />\n            </div>\n            <div className=\"App-body\">\n              <ContractProvider>\n                <ContractActions />\n              </ContractProvider>\n            </div>\n          </AccountProvider>\n        </EthereumProvider>\n      </MessageProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}